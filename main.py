import random
from random import randrange
from tqdm import tqdm
import time
import map
import excel


class Problem_Genetic(object):
    def __init__(self, genes, individuals_length, decode, fitness):
        self.genes = genes
        self.individuals_length = individuals_length
        self.decode = decode
        self.fitness = fitness

    def mutation(self, chromosome, prob):
        def inversion_mutation(chromosome_aux):
            chromosome = chromosome_aux
            index1 = randrange(0, len(chromosome))
            index2 = randrange(index1, len(chromosome))
            chromosome_mid = chromosome[index1:index2]
            chromosome_mid.reverse()
            chromosome_result = chromosome[0:index1] + chromosome_mid + chromosome[index2:]
            return chromosome_result

        aux = chromosome[:]
        for i in range(len(aux)):
            if random.random() < prob:
                aux = inversion_mutation(aux)
        return aux

    def crossover(self, parent1, parent2):
        def process_gen_repeated(copy_child1, copy_child2):
            count1 = 0
            for gen1 in copy_child1[:pos]:
                repeat = copy_child1.count(gen1)
                if repeat > 1:
                    count2 = 0
                    for gen2 in parent1[pos:]:
                        if gen2 not in copy_child1:
                            child1[count1] = parent1[pos:][count2]
                        count2 += 1
                count1 += 1

            count1 = 0
            for gen1 in copy_child2[:pos]:
                repeat = copy_child2.count(gen1)
                if repeat > 1:
                    count2 = 0
                    for gen2 in parent2[pos:]:
                        if gen2 not in copy_child2:
                            child2[count1] = parent2[pos:][count2]
                        count2 += 1
                count1 += 1

            return [child1, child2]

        pos = random.randrange(1, self.individuals_length - 1)
        child1 = parent1[:pos] + parent2[pos:]
        child2 = parent2[:pos] + parent1[pos:]
        return process_gen_repeated(child1, child2)

    def is_valid_chromosome(self, chromosome):
        truck_count = sum(1 for gene in chromosome if gene in trucks)
        return truck_count == len(trucks) and chromosome[-1] in trucks


def decodeVRP(chromosome):
    decoded = []
    sub_route = []
    start_city = 'Paris'
    for gene in chromosome:
        if gene in trucks:
            if sub_route:
                sub_route.insert(0, start_city)
                sub_route.append(start_city)
                decoded.extend(sub_route)
                sub_route = []
            decoded.append(f"{gene}")
            start_city = 'Paris'
        else:
            if start_city is None:
                start_city = cities[gene][0]
            sub_route.append(cities[gene][0])
    if sub_route:
        sub_route.insert(0, start_city)  # Insert 'Paris' at the start
        sub_route.append(start_city)  # Append 'Paris' at the end
        decoded.extend(sub_route)
    return decoded


def penalty_capacity(chromosome):
    actual = chromosome
    value_penalty = 0
    capacity_list = []
    index_cap = 0

    truck_keys = list(trucks.keys())
    current_capacity = trucks[truck_keys[index_cap]]

    for gene in actual:
        if gene not in trucks:
            capacity_list.append(gene)
            if sum(cities[city][1] for city in capacity_list) > current_capacity:
                value_penalty += 100
        else:
            index_cap += 1
            if index_cap >= len(truck_keys):
                break
            current_capacity = trucks[truck_keys[index_cap]]
            capacity_list = []

    return value_penalty


def fitnessVRP(chromosome):
    def distanceTrip(index, city):
        w = distances.get(index, {})
        return w.get(city, 1000000)

    actualChromosome = chromosome
    fitness_value = 0

    penalty_cap = penalty_capacity(actualChromosome)
    sub_route = []
    start_city = 'Paris'
    for key in range(len(actualChromosome)):
        if actualChromosome[key] in trucks:
            if sub_route:
                start_idx = sub_route[0]
                end_idx = sub_route[-1]
                fitness_value += distanceTrip(end_idx, start_idx)
                sub_route = []
            start_city = 'Paris'
        else:
            if start_city is None:
                start_city = actualChromosome[key]
            if sub_route:
                fitness_value += distanceTrip(sub_route[-1], actualChromosome[key])
            sub_route.append(actualChromosome[key])
    if sub_route:
        start_idx = sub_route[0]
        end_idx = sub_route[-1]
        fitness_value += distanceTrip(end_idx, start_idx)

    fitness_value += penalty_cap
    return fitness_value


def max_age_from_fitness(fitness_value, min_fitness, max_fitness, min_age, max_age):
    if max_fitness == min_fitness:
        return max_age
    return int(min_age + (max_age - min_age) * (max_fitness - fitness_value) / (max_fitness - min_fitness))


def genetic_algorithm_t(Problem_Genetic, k, opt, ngen, size, prob_mutate, min_age, max_age):
    def initial_population(Problem_Genetic, size):
        def generate_chromosome():
            chromosome = []
            for i in Problem_Genetic.genes:
                chromosome.append(i)
            random.shuffle(chromosome)
            while not Problem_Genetic.is_valid_chromosome(chromosome):
                random.shuffle(chromosome)
            while chromosome[-1] not in trucks:
                random.shuffle(chromosome)
            return chromosome

        return [(generate_chromosome(), 0) for _ in range(size)]

    def new_generation_t(Problem_Genetic, k, opt, population, n_parents, n_directs, prob_mutate, min_age, max_age):
        def tournament_selection(Problem_Genetic, population, n, k, opt):
            winners = []
            for _ in range(n):
                elements = random.sample(population, k)
                winners.append(opt(elements, key=lambda x: Problem_Genetic.fitness(x[0])))
            return winners

        def cross_parents(Problem_Genetic, parents):
            childs = []
            for i in range(0, len(parents), 2):
                children = Problem_Genetic.crossover(parents[i][0], parents[i + 1][0])
                for child in children:
                    if Problem_Genetic.is_valid_chromosome(child):
                        childs.append((child, 0))
            return childs

        def mutate(Problem_Genetic, population, prob):
            for i in range(len(population)):
                mutated_chromosome = Problem_Genetic.mutation(population[i][0], prob)
                if Problem_Genetic.is_valid_chromosome(mutated_chromosome):
                    population[i] = (mutated_chromosome, population[i][1])
            return population

        def age_population(population, min_age, max_age, min_fitness, max_fitness):
            aged_population = []
            for chromosome, age in population:
                fitness_value = Problem_Genetic.fitness(chromosome)
                individual_max_age = max_age_from_fitness(fitness_value, min_fitness, max_fitness, min_age, max_age)
                if age <= individual_max_age:
                    aged_population.append((chromosome, age + 1))
            return aged_population

        min_fitness = min(population, key=lambda x: Problem_Genetic.fitness(x[0]))[1]
        max_fitness = max(population, key=lambda x: Problem_Genetic.fitness(x[0]))[1]

        directs = tournament_selection(Problem_Genetic, population, n_directs, k, opt)
        crosses = cross_parents(Problem_Genetic, tournament_selection(Problem_Genetic, population, n_parents, k, opt))
        mutations = mutate(Problem_Genetic, crosses, prob_mutate)
        new_generation = directs + mutations

        return age_population(new_generation, min_age, max_age, min_fitness, max_fitness)

    population = initial_population(Problem_Genetic, size)

    best_fitness = float('inf')
    best_gen = -1  # Initialize the best generation number

    for gen in tqdm(range(ngen), desc="Generation progress"):
        population = new_generation_t(Problem_Genetic, k, opt, population, 500, 500, prob_mutate, min_age, max_age)
        if not population:  # In case all individuals get aged out
            population = initial_population(Problem_Genetic, size)

        # Update the best fitness and generation number
        current_best_fitness = min(Problem_Genetic.fitness(ind[0]) for ind in population)
        if current_best_fitness < best_fitness:
            best_fitness = current_best_fitness
            best_gen = gen

    execution_time = time.time() - start_time
    best_chromosome, _ = opt(population, key=lambda x: Problem_Genetic.fitness(x[0]))
    print("Chromosome: ", best_chromosome)
    genotype = Problem_Genetic.decode(best_chromosome)
    print("Solution: ", (genotype, Problem_Genetic.fitness(best_chromosome)))
    map.generate_map(map.generate_coordinates(genotype, trucks))

    data = [k, ngen, size, prob_mutate, min_age, max_age, len(cities), Problem_Genetic.fitness(best_chromosome),
            best_gen, execution_time, execution_time / len(cities)]

    excel.add_data_to_excel(data)

    return genotype, Problem_Genetic.fitness(best_chromosome)


# Usage
cities = {
    0: ('Nice', 1),
    1: ('Aix-en-Provence', 3),
    2: ('Marseille', 3),
    3: ('Caen', 1),
    4: ('Dijon', 1),
    5: ('Besançon', 1),
    6: ('Brest', 1),
    7: ('Nîmes', 2),
    8: ('Toulouse', 1),
    9: ('Bordeaux', 1),
    10: ('Montpellier', 2),
    11: ('Rennes', 3),
    12: ('Tours', 3),
    13: ('Grenoble', 1),
    14: ('Saint-Étienne', 2),
    15: ('Nantes', 2),
    16: ('Orléans', 1),
    17: ('Angers', 2),
    18: ('Reims', 2),
    19: ('Nancy', 3),
    20: ('Metz', 2),
    21: ('Lille', 2),
    22: ('Clermont-Ferrand', 2),
    23: ('Perpignan', 1),
    24: ('Strasbourg', 1),
    25: ('Mulhouse', 2),
    26: ('Lyon', 3),
    27: ('Villeurbanne', 2),
    28: ('Le Mans', 3),
    29: ('Paris', 3),
    30: ('Rouen', 3),
    31: ('Le Havre', 2),
    32: ('Amiens', 3),
    33: ('Toulon', 2),
    34: ('Limoges', 1),
    35: ('Boulogne-Billancourt', 3),
    36: ('Montreuil', 2),
    37: ('Saint-Denis', 3),
    38: ('Argenteuil', 1),
}
distances = {
    0: {1: 147.41, 2: 157.63, 3: 842.31, 4: 438.15, 5: 405.97, 6: 1043.85, 7: 233.33, 8: 468.03, 9: 634.77, 10: 271.08, 11: 845.04, 12: 654.80, 13: 203.51, 14: 296.82, 15: 789.25, 16: 625.63, 17: 736.92, 18: 664.31, 19: 559.97, 20: 609.82, 21: 832.95, 22: 402.35, 23: 371.56, 24: 544.36, 25: 450.39, 26: 297.66, 27: 296.21, 28: 725.25, 29: 686.20, 30: 792.31, 31: 842.77, 32: 785.23, 33: 124.57, 34: 530.33, 35: 687.79, 36: 683.10, 37: 692.31, 38: 698.36, },
    1: {0: 147.41, 2: 26.71, 3: 768.70, 4: 421.95, 5: 415.92, 6: 937.04, 7: 93.28, 8: 322.33, 9: 499.66, 10: 125.10, 11: 747.92, 12: 565.93, 13: 183.02, 14: 226.61, 15: 681.68, 16: 559.14, 17: 638.99, 18: 644.64, 19: 575.69, 20: 625.22, 21: 809.45, 22: 311.65, 23: 227.55, 24: 589.22, 25: 491.55, 26: 251.86, 27: 252.12, 28: 641.14, 29: 638.09, 30: 735.44, 31: 777.14, 32: 746.98, 33: 61.50, 34: 419.08, 35: 638.11, 36: 636.27, 37: 645.21, 38: 650.01, },
    2: {0: 157.63, 1: 26.71, 3: 788.41, 4: 447.89, 5: 442.58, 6: 950.19, 7: 101.97, 8: 320.06, 9: 504.50, 10: 125.16, 11: 763.58, 12: 583.75, 13: 209.69, 14: 249.93, 15: 695.18, 16: 580.40, 17: 654.79, 18: 669.95, 19: 602.32, 20: 651.83, 21: 834.30, 22: 330.84, 23: 213.93, 24: 615.75, 25: 518.07, 26: 277.05, 27: 277.42, 28: 659.53, 29: 661.20, 30: 757.40, 31: 797.94, 32: 770.78, 33: 49.38, 34: 432.84, 35: 661.06, 36: 659.51, 37: 668.40, 38: 673.06, },
    3: {0: 842.31, 1: 768.70, 2: 788.41, 4: 448.16, 5: 519.29, 6: 315.02, 7: 694.86, 8: 635.67, 9: 483.98, 10: 700.33, 11: 156.71, 12: 214.25, 13: 639.73, 14: 549.44, 15: 236.06, 16: 217.39, 17: 191.45, 18: 318.41, 19: 481.53, 20: 473.77, 21: 292.97, 22: 457.60, 23: 764.61, 24: 595.74, 25: 588.18, 26: 544.96, 27: 546.60, 28: 137.65, 29: 199.73, 30: 107.57, 31: 49.66, 32: 207.14, 33: 829.62, 34: 389.61, 35: 193.58, 36: 205.96, 37: 199.28, 38: 191.18, },
    4: {0: 438.15, 1: 421.95, 2: 447.89, 3: 448.16, 5: 77.05, 6: 718.45, 7: 390.79, 8: 498.78, 9: 511.42, 10: 422.61, 11: 508.42, 12: 326.50, 13: 245.05, 14: 214.70, 15: 495.47, 16: 242.93, 17: 419.28, 18: 226.95, 19: 175.62, 20: 219.22, 21: 395.26, 22: 225.66, 23: 541.77, 24: 247.51, 25: 180.46, 26: 173.74, 27: 172.65, 28: 368.59, 29: 262.35, 30: 373.81, 31: 434.45, 32: 349.81, 33: 472.50, 34: 330.80, 35: 265.85, 36: 257.89, 37: 266.89, 38: 274.08, },
    5: {0: 405.97, 1: 415.92, 2: 442.58, 3: 519.29, 4: 77.05, 6: 794.82, 7: 401.88, 8: 541.65, 9: 575.68, 10: 439.13, 11: 584.97, 12: 403.50, 13: 232.93, 14: 237.74, 15: 572.35, 16: 318.71, 17: 496.32, 18: 267.16, 19: 159.86, 20: 209.65, 21: 434.06, 22: 278.45, 23: 564.92, 24: 195.81, 25: 112.37, 26: 189.24, 27: 186.94, 28: 444.94, 29: 327.39, 30: 438.93, 31: 502.28, 32: 402.73, 33: 459.67, 34: 397.45, 35: 331.76, 36: 322.28, 37: 330.90, 38: 338.56, },
    6: {0: 1043.85, 1: 937.04, 2: 950.19, 3: 315.02, 4: 718.45, 5: 794.82, 7: 848.48, 8: 702.23, 9: 496.62, 10: 837.33, 11: 210.31, 12: 401.38, 13: 854.92, 14: 750.42, 15: 255.51, 16: 476.38, 17: 310.82, 18: 630.25, 19: 786.49, 20: 784.14, 21: 598.58, 22: 642.09, 23: 855.49, 24: 900.77, 25: 880.02, 26: 764.08, 27: 766.63, 28: 349.89, 29: 504.21, 30: 422.57, 31: 358.56, 32: 520.56, 33: 997.66, 34: 518.01, 35: 497.14, 36: 510.74, 37: 505.75, 38: 498.00, },
    7: {0: 233.33, 1: 93.28, 2: 101.97, 3: 694.86, 4: 390.79, 5: 401.88, 6: 848.48, 8: 235.83, 9: 406.48, 10: 45.60, 11: 663.56, 12: 486.88, 13: 183.66, 14: 177.96, 15: 593.67, 16: 492.01, 17: 555.02, 18: 602.79, 19: 557.69, 20: 605.47, 21: 762.28, 22: 238.74, 23: 174.52, 24: 589.27, 25: 493.04, 26: 217.60, 27: 219.06, 28: 563.48, 29: 579.70, 30: 670.62, 31: 707.23, 32: 692.28, 33: 150.57, 34: 331.65, 35: 578.82, 36: 578.65, 37: 587.25, 38: 591.24, },
    8: {0: 468.03, 1: 322.33, 2: 320.06, 3: 635.67, 4: 498.78, 5: 541.65, 6: 702.23, 7: 235.83, 9: 210.25, 10: 197.28, 11: 553.78, 12: 424.72, 13: 382.31, 14: 311.22, 15: 464.64, 16: 481.36, 17: 456.83, 18: 658.99, 19: 673.76, 20: 714.13, 21: 791.72, 22: 275.57, 23: 155.66, 24: 737.27, 25: 650.08, 26: 360.82, 27: 363.86, 28: 498.49, 29: 589.06, 30: 649.18, 31: 663.51, 32: 703.62, 33: 367.71, 34: 250.61, 35: 585.29, 36: 590.64, 37: 597.27, 38: 598.18, },
    9: {0: 634.77, 1: 499.66, 2: 504.50, 3: 483.98, 4: 511.42, 5: 575.68, 6: 496.62, 7: 406.48, 8: 210.25, 10: 380.17, 11: 371.36, 12: 299.46, 13: 495.30, 14: 395.21, 15: 275.68, 16: 391.56, 17: 292.82, 18: 601.99, 19: 669.61, 20: 699.15, 21: 699.62, 22: 304.32, 23: 365.90, 24: 758.28, 25: 687.73, 26: 435.26, 27: 438.62, 28: 356.99, 29: 499.40, 30: 526.47, 31: 521.60, 32: 603.22, 33: 553.86, 34: 181.49, 35: 493.61, 36: 503.08, 37: 507.11, 38: 505.23, },
    10: {0: 271.08, 1: 125.10, 2: 125.16, 3: 700.33, 4: 422.61, 5: 439.13, 6: 837.33, 7: 45.60, 8: 197.28, 9: 380.17, 11: 658.78, 12: 488.97, 13: 227.09, 14: 207.93, 15: 584.23, 16: 504.01, 17: 551.26, 18: 628.36, 19: 592.67, 20: 639.65, 21: 784.49, 22: 250.87, 23: 130.28, 24: 629.05, 25: 533.53, 26: 251.72, 27: 253.56, 28: 566.32, 29: 596.71, 30: 682.97, 31: 715.76, 32: 710.79, 33: 174.23, 34: 325.35, 35: 595.29, 36: 596.12, 37: 604.48, 38: 607.95, },
    11: {0: 845.04, 1: 747.92, 2: 763.58, 3: 156.71, 4: 508.42, 5: 584.97, 6: 210.31, 7: 663.56, 8: 553.78, 9: 371.36, 10: 658.78, 12: 193.35, 13: 651.14, 14: 548.91, 15: 96.88, 16: 267.23, 17: 108.96, 18: 439.28, 19: 585.72, 20: 588.55, 21: 445.65, 22: 443.04, 23: 698.09, 24: 699.09, 25: 672.59, 26: 558.63, 27: 561.02, 28: 140.32, 29: 309.19, 30: 252.29, 31: 206.21, 32: 353.87, 33: 809.29, 34: 333.44, 35: 301.76, 36: 315.67, 37: 312.34, 38: 305.28, },
    12: {0: 654.80, 1: 565.93, 2: 583.75, 3: 214.25, 4: 326.50, 5: 403.50, 6: 401.38, 7: 486.88, 8: 424.72, 9: 299.46, 10: 488.97, 11: 193.35, 13: 458.56, 14: 358.01, 15: 169.42, 16: 108.74, 17: 93.24, 18: 323.13, 19: 434.80, 20: 450.02, 21: 400.97, 22: 255.50, 23: 550.40, 24: 542.40, 25: 500.44, 26: 365.51, 27: 367.86, 28: 77.53, 29: 205.33, 30: 229.85, 31: 238.84, 32: 303.99, 33: 627.38, 34: 175.90, 35: 198.80, 36: 209.94, 37: 212.45, 38: 209.39, },
    13: {0: 203.51, 1: 183.02, 2: 209.69, 3: 639.73, 4: 245.05, 5: 232.93, 6: 854.92, 7: 183.66, 8: 382.31, 9: 495.30, 10: 227.09, 11: 651.14, 12: 458.56, 14: 107.16, 15: 603.71, 16: 422.64, 17: 544.77, 18: 471.48, 19: 392.74, 20: 442.37, 21: 639.04, 22: 216.46, 23: 357.36, 24: 410.10, 25: 312.79, 26: 94.85, 27: 93.14, 28: 526.10, 29: 483.64, 30: 588.95, 31: 639.34, 32: 585.34, 33: 228.60, 34: 356.21, 35: 485.00, 36: 480.75, 37: 489.94, 38: 495.80, },
    14: {0: 296.82, 1: 226.61, 2: 249.93, 3: 549.44, 4: 214.70, 5: 237.74, 6: 750.42, 7: 177.96, 8: 311.22, 9: 395.21, 10: 207.93, 11: 548.91, 12: 358.01, 13: 107.16, 15: 497.89, 16: 335.57, 17: 441.39, 18: 425.29, 19: 386.22, 20: 432.43, 21: 586.62, 22: 109.56, 23: 328.91, 24: 432.58, 25: 341.42, 26: 49.90, 27: 52.80, 28: 428.81, 29: 411.48, 30: 509.84, 31: 554.19, 32: 520.92, 33: 285.04, 34: 249.21, 35: 411.52, 36: 409.68, 37: 418.61, 38: 423.40, },
    15: {0: 789.25, 1: 681.68, 2: 695.18, 3: 236.06, 4: 495.47, 5: 572.35, 6: 255.51, 7: 593.67, 8: 464.64, 9: 275.68, 10: 584.23, 11: 96.88, 12: 169.42, 13: 603.71, 14: 497.89, 16: 270.26, 17: 80.31, 18: 471.14, 19: 599.48, 20: 610.26, 21: 507.84, 22: 388.73, 23: 612.82, 24: 709.27, 25: 669.80, 26: 515.29, 27: 518.03, 28: 157.47, 29: 342.32, 30: 314.05, 31: 282.70, 32: 411.36, 33: 742.42, 34: 262.59, 35: 334.86, 36: 348.30, 37: 347.42, 38: 341.73, },
    16: {0: 625.63, 1: 559.14, 2: 580.40, 3: 217.39, 4: 242.93, 5: 318.71, 6: 476.38, 7: 492.01, 8: 481.36, 9: 391.56, 10: 504.01, 11: 267.23, 12: 108.74, 13: 422.64, 14: 335.57, 15: 270.26, 17: 190.07, 18: 215.87, 19: 329.25, 20: 342.03, 21: 313.69, 22: 253.71, 23: 586.97, 24: 439.33, 25: 405.90, 26: 328.02, 27: 329.56, 28: 126.92, 29: 109.90, 30: 178.98, 31: 218.62, 32: 222.46, 33: 619.17, 34: 235.05, 35: 105.15, 36: 112.74, 37: 117.99, 38: 117.76, },
    17: {0: 736.92, 1: 638.99, 2: 654.79, 3: 191.45, 4: 419.28, 5: 496.32, 6: 310.82, 7: 555.02, 8: 456.83, 9: 292.82, 10: 551.26, 11: 108.96, 12: 93.24, 13: 544.77, 14: 441.39, 15: 80.31, 16: 190.07, 18: 392.33, 19: 519.22, 20: 530.04, 21: 439.72, 22: 334.64, 23: 596.16, 24: 629.28, 25: 591.57, 26: 453.35, 27: 455.87, 28: 81.62, 29: 264.71, 30: 249.65, 31: 231.63, 32: 341.98, 33: 700.38, 34: 226.23, 35: 257.35, 36: 270.50, 37: 270.26, 38: 265.03, },
    18: {0: 664.31, 1: 644.64, 2: 669.95, 3: 318.41, 4: 226.95, 5: 267.16, 6: 630.25, 7: 602.79, 8: 658.99, 9: 601.99, 10: 628.36, 11: 439.28, 12: 323.13, 13: 471.48, 14: 425.29, 15: 471.14, 16: 215.87, 17: 392.33, 19: 170.25, 20: 155.57, 21: 168.65, 22: 392.02, 23: 735.55, 24: 281.49, 25: 294.81, 26: 392.90, 27: 392.54, 28: 314.11, 29: 130.48, 30: 214.68, 31: 283.69, 32: 144.37, 33: 697.44, 34: 431.86, 35: 137.99, 36: 124.13, 37: 126.95, 38: 134.05, },
    19: {0: 559.97, 1: 575.69, 2: 602.32, 3: 481.53, 4: 175.62, 5: 159.86, 6: 786.49, 7: 557.69, 8: 673.76, 9: 669.61, 10: 592.67, 11: 585.72, 12: 434.80, 13: 392.74, 14: 386.22, 15: 599.48, 16: 329.25, 17: 519.22, 18: 170.25, 20: 50.10, 21: 312.81, 22: 399.12, 23: 715.01, 24: 114.44, 25: 133.49, 26: 340.97, 27: 339.20, 28: 449.80, 29: 283.20, 30: 381.96, 31: 450.86, 32: 313.48, 33: 619.32, 34: 488.45, 35: 290.00, 36: 276.74, 37: 282.67, 38: 290.70, },
    20: {0: 609.82, 1: 625.22, 2: 651.83, 3: 473.77, 4: 219.22, 5: 209.65, 6: 784.14, 7: 605.47, 8: 714.13, 9: 699.15, 10: 639.65, 11: 588.55, 12: 450.02, 13: 442.37, 14: 432.43, 15: 610.26, 16: 342.03, 17: 530.04, 18: 155.57, 19: 50.10, 21: 277.72, 22: 438.65, 23: 760.67, 24: 130.98, 25: 176.25, 26: 388.21, 27: 386.57, 28: 456.63, 29: 280.47, 30: 370.15, 31: 439.11, 32: 291.83, 33: 669.26, 34: 519.17, 35: 287.73, 36: 273.93, 37: 278.49, 38: 286.18, },
    21: {0: 832.95, 1: 809.45, 2: 834.30, 3: 292.97, 4: 395.26, 5: 434.06, 6: 598.58, 7: 762.28, 8: 791.72, 9: 699.62, 10: 784.49, 11: 445.65, 12: 400.97, 13: 639.04, 14: 586.62, 15: 507.84, 16: 313.69, 17: 439.72, 18: 168.65, 19: 312.81, 20: 277.72, 22: 539.30, 23: 884.11, 24: 407.11, 25: 445.87, 26: 557.70, 27: 557.59, 28: 358.99, 29: 203.89, 30: 194.60, 31: 244.34, 32: 98.07, 33: 863.57, 34: 548.58, 35: 208.58, 36: 201.64, 37: 195.75, 38: 196.14, },
    22: {0: 402.35, 1: 311.65, 2: 330.84, 3: 457.60, 4: 225.66, 5: 278.45, 6: 642.09, 7: 238.74, 8: 275.57, 9: 304.32, 10: 250.87, 11: 443.04, 12: 255.50, 13: 216.46, 14: 109.56, 15: 388.73, 16: 253.71, 17: 334.64, 18: 392.02, 19: 399.12, 20: 438.65, 21: 539.30, 23: 345.07, 24: 470.29, 25: 390.56, 26: 136.38, 27: 139.61, 28: 329.74, 29: 346.61, 30: 432.63, 31: 468.57, 32: 461.47, 33: 372.90, 34: 142.27, 35: 344.91, 36: 346.34, 37: 354.49, 38: 357.66, },
    23: {0: 371.56, 1: 227.55, 2: 213.93, 3: 764.61, 4: 541.77, 5: 564.92, 6: 855.49, 7: 174.52, 8: 155.66, 9: 365.90, 10: 130.28, 11: 698.09, 12: 550.40, 13: 357.36, 14: 328.91, 15: 612.82, 16: 586.97, 17: 596.16, 18: 735.55, 19: 715.01, 20: 760.67, 21: 884.11, 22: 345.07, 24: 756.98, 25: 662.23, 26: 375.87, 27: 378.05, 28: 627.18, 29: 688.08, 30: 763.25, 31: 786.94, 32: 803.70, 33: 253.05, 34: 375.35, 35: 685.60, 36: 688.44, 37: 696.15, 38: 698.54, },
    24: {0: 544.36, 1: 589.22, 2: 615.75, 3: 595.74, 4: 247.51, 5: 195.81, 6: 900.77, 7: 589.27, 8: 737.27, 9: 758.28, 10: 629.05, 11: 699.09, 12: 542.40, 13: 410.10, 14: 432.58, 15: 709.27, 16: 439.33, 17: 629.28, 18: 281.49, 19: 114.44, 20: 130.98, 21: 407.11, 22: 470.29, 23: 756.98, 25: 97.68, 26: 383.31, 27: 380.78, 28: 562.08, 29: 397.64, 30: 495.18, 31: 564.20, 32: 421.75, 33: 623.88, 34: 577.09, 35: 404.44, 36: 391.18, 37: 397.06, 38: 405.07, },
    25: {0: 450.39, 1: 491.55, 2: 518.07, 3: 588.18, 4: 180.46, 5: 112.37, 6: 880.02, 7: 493.04, 8: 650.08, 9: 687.73, 10: 533.53, 11: 672.59, 12: 500.44, 13: 312.79, 14: 341.42, 15: 669.80, 16: 405.90, 17: 591.57, 18: 294.81, 19: 133.49, 20: 176.25, 21: 445.87, 22: 390.56, 23: 662.23, 24: 97.68, 26: 291.61, 27: 288.88, 28: 532.57, 29: 389.00, 30: 496.12, 31: 563.55, 32: 439.09, 33: 526.63, 34: 508.78, 35: 394.81, 36: 382.99, 37: 390.44, 38: 398.55, },
    26: {0: 297.66, 1: 251.86, 2: 277.05, 3: 544.96, 4: 173.74, 5: 189.24, 6: 764.08, 7: 217.60, 8: 360.82, 9: 435.26, 10: 251.72, 11: 558.63, 12: 365.51, 13: 94.85, 14: 49.90, 15: 515.29, 16: 328.02, 17: 453.35, 18: 392.90, 19: 340.97, 20: 388.21, 21: 557.70, 22: 136.38, 23: 375.87, 24: 383.31, 25: 291.61, 27: 3.37, 28: 431.79, 29: 392.81, 30: 496.19, 31: 545.23, 32: 497.94, 33: 306.31, 34: 278.55, 35: 393.72, 36: 390.31, 37: 399.43, 38: 404.93, },
    27: {0: 296.21, 1: 252.12, 2: 277.42, 3: 546.60, 4: 172.65, 5: 186.94, 6: 766.63, 7: 219.06, 8: 363.86, 9: 438.62, 10: 253.56, 11: 561.02, 12: 367.86, 13: 93.14, 14: 52.80, 15: 518.03, 16: 329.56, 17: 455.87, 18: 392.54, 19: 339.20, 20: 386.57, 21: 557.59, 22: 139.61, 23: 378.05, 24: 380.78, 25: 288.88, 26: 3.37, 28: 433.88, 29: 393.57, 30: 497.25, 31: 546.59, 32: 498.34, 33: 306.22, 34: 281.75, 35: 394.54, 36: 391.01, 37: 400.15, 38: 405.69, },
    28: {0: 725.25, 1: 641.14, 2: 659.53, 3: 137.65, 4: 368.59, 5: 444.94, 6: 349.89, 7: 563.48, 8: 498.49, 9: 356.99, 10: 566.32, 11: 140.32, 12: 77.53, 13: 526.10, 14: 428.81, 15: 157.47, 16: 126.92, 17: 81.62, 18: 314.11, 19: 449.80, 20: 456.63, 21: 358.99, 22: 329.74, 23: 627.18, 24: 562.08, 25: 532.57, 26: 431.79, 27: 433.88, 29: 184.86, 30: 172.04, 31: 166.86, 32: 261.03, 33: 702.51, 34: 252.01, 35: 177.40, 36: 190.87, 37: 189.97, 38: 184.37, },
    29: {0: 686.20, 1: 638.09, 2: 661.20, 3: 199.73, 4: 262.35, 5: 327.39, 6: 504.21, 7: 579.70, 8: 589.06, 9: 499.40, 10: 596.71, 11: 309.19, 12: 205.33, 13: 483.64, 14: 411.48, 15: 342.32, 16: 109.90, 17: 264.71, 18: 130.48, 19: 283.20, 20: 280.47, 21: 203.89, 22: 346.61, 23: 688.08, 24: 397.64, 25: 389.00, 26: 392.81, 27: 393.57, 28: 184.86, 30: 111.70, 31: 175.76, 32: 115.69, 33: 696.02, 34: 344.69, 35: 7.52, 36: 6.54, 37: 8.21, 38: 12.16, },
    30: {0: 792.31, 1: 735.44, 2: 757.40, 3: 107.57, 4: 373.81, 5: 438.93, 6: 422.57, 7: 670.62, 8: 649.18, 9: 526.47, 10: 682.97, 11: 252.29, 12: 229.85, 13: 588.95, 14: 509.84, 15: 314.05, 16: 178.98, 17: 249.65, 18: 214.68, 19: 381.96, 20: 370.15, 21: 194.60, 22: 432.63, 23: 763.25, 24: 495.18, 25: 496.12, 26: 496.19, 27: 497.25, 28: 172.04, 29: 111.70, 31: 69.05, 32: 101.78, 33: 794.75, 34: 398.64, 35: 107.96, 36: 116.66, 37: 108.07, 38: 100.38, },
    31: {0: 842.77, 1: 777.14, 2: 797.94, 3: 49.66, 4: 434.45, 5: 502.28, 6: 358.56, 7: 707.23, 8: 663.51, 9: 521.60, 10: 715.76, 11: 206.21, 12: 238.84, 13: 639.34, 14: 554.19, 15: 282.70, 16: 218.62, 17: 231.63, 18: 283.69, 19: 450.86, 20: 439.11, 21: 244.34, 22: 468.57, 23: 786.94, 24: 564.20, 25: 563.55, 26: 545.23, 27: 546.59, 28: 166.86, 29: 175.76, 30: 69.05, 32: 162.04, 33: 837.44, 34: 414.37, 35: 170.81, 36: 181.38, 37: 173.45, 38: 165.43, },
    32: {0: 785.23, 1: 746.98, 2: 770.78, 3: 207.14, 4: 349.81, 5: 402.73, 6: 520.56, 7: 692.28, 8: 703.62, 9: 603.22, 10: 710.79, 11: 353.87, 12: 303.99, 13: 585.34, 14: 520.92, 15: 411.36, 16: 222.46, 17: 341.98, 18: 144.37, 19: 313.48, 20: 291.83, 21: 98.07, 22: 461.47, 23: 803.70, 24: 421.75, 25: 439.09, 26: 497.94, 27: 498.34, 28: 261.03, 29: 115.69, 30: 101.78, 31: 162.04, 33: 803.64, 34: 457.08, 35: 118.67, 36: 115.30, 37: 107.57, 38: 105.70, },
    33: {0: 124.57, 1: 61.50, 2: 49.38, 3: 829.62, 4: 472.50, 5: 459.67, 6: 997.66, 7: 150.57, 8: 367.71, 9: 553.86, 10: 174.23, 11: 809.29, 12: 627.38, 13: 228.60, 14: 285.04, 15: 742.42, 16: 619.17, 17: 700.38, 18: 697.44, 19: 619.32, 20: 669.26, 21: 863.57, 22: 372.90, 23: 253.05, 24: 623.88, 25: 526.63, 26: 306.31, 27: 306.22, 28: 702.51, 29: 696.02, 30: 794.75, 31: 837.44, 32: 803.64, 34: 479.87, 35: 696.26, 36: 694.00, 37: 703.00, 38: 708.00, },
    34: {0: 530.33, 1: 419.08, 2: 432.84, 3: 389.61, 4: 330.80, 5: 397.45, 6: 518.01, 7: 331.65, 8: 250.61, 9: 181.49, 10: 325.35, 11: 333.44, 12: 175.90, 13: 356.21, 14: 249.21, 15: 262.59, 16: 235.05, 17: 226.23, 18: 431.86, 19: 488.45, 20: 519.17, 21: 548.58, 22: 142.27, 23: 375.35, 24: 577.09, 25: 508.78, 26: 278.55, 27: 281.75, 28: 252.01, 29: 344.69, 30: 398.64, 31: 414.37, 32: 457.08, 33: 479.87, 35: 340.17, 36: 347.07, 37: 352.84, 38: 352.82, },
    35: {0: 687.79, 1: 638.11, 2: 661.06, 3: 193.58, 4: 265.85, 5: 331.76, 6: 497.14, 7: 578.82, 8: 585.29, 9: 493.61, 10: 595.29, 11: 301.76, 12: 198.80, 13: 485.00, 14: 411.52, 15: 334.86, 16: 105.15, 17: 257.35, 18: 137.99, 19: 290.00, 20: 287.73, 21: 208.58, 22: 344.91, 23: 685.60, 24: 404.44, 25: 394.81, 26: 393.72, 27: 394.54, 28: 177.40, 29: 7.52, 30: 107.96, 31: 170.81, 32: 118.67, 33: 696.26, 34: 340.17, 36: 13.92, 37: 13.65, 38: 12.98, },
    36: {0: 683.10, 1: 636.27, 2: 659.51, 3: 205.96, 4: 257.89, 5: 322.28, 6: 510.74, 7: 578.65, 8: 590.64, 9: 503.08, 10: 596.12, 11: 315.67, 12: 209.94, 13: 480.75, 14: 409.68, 15: 348.30, 16: 112.74, 17: 270.50, 18: 124.13, 19: 276.74, 20: 273.93, 21: 201.64, 22: 346.34, 23: 688.44, 24: 391.18, 25: 382.99, 26: 390.31, 27: 391.01, 28: 190.87, 29: 6.54, 30: 116.66, 31: 181.38, 32: 115.30, 33: 694.00, 34: 347.07, 35: 13.92, 37: 9.21, 38: 16.29, },
    37: {0: 692.31, 1: 645.21, 2: 668.40, 3: 199.28, 4: 266.89, 5: 330.90, 6: 505.75, 7: 587.25, 8: 597.27, 9: 507.11, 10: 604.48, 11: 312.34, 12: 212.45, 13: 489.94, 14: 418.61, 15: 347.42, 16: 117.99, 17: 270.26, 18: 126.95, 19: 282.67, 20: 278.49, 21: 195.75, 22: 354.49, 23: 696.15, 24: 397.06, 25: 390.44, 26: 399.43, 27: 400.15, 28: 189.97, 29: 8.21, 30: 108.07, 31: 173.45, 32: 107.57, 33: 703.00, 34: 352.84, 35: 13.65, 36: 9.21, 38: 8.13, },
    38: {0: 698.36, 1: 650.01, 2: 673.06, 3: 191.18, 4: 274.08, 5: 338.56, 6: 498.00, 7: 591.24, 8: 598.18, 9: 505.23, 10: 607.95, 11: 305.28, 12: 209.39, 13: 495.80, 14: 423.40, 15: 341.73, 16: 117.76, 17: 265.03, 18: 134.05, 19: 290.70, 20: 286.18, 21: 196.14, 22: 357.66, 23: 698.54, 24: 405.07, 25: 398.55, 26: 404.93, 27: 405.69, 28: 184.37, 29: 12.16, 30: 100.38, 31: 165.43, 32: 105.70, 33: 708.00, 34: 352.82, 35: 12.98, 36: 16.29, 37: 8.13, },
}
trucks = {
    'truck1': 10,
    'truck2': 20,
    'truck3': 20,
    'truck4': 10
}
problem = Problem_Genetic(
    genes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 'truck1', 'truck2', 'truck3', 'truck4'],
    individuals_length=43,
    decode=decodeVRP,
    fitness=fitnessVRP
)

start_time = time.time()

best_solution = genetic_algorithm_t(problem, 3, min, 1000, 01, 0.15, 0, 100)
