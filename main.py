import random
from random import randrange
from tqdm import tqdm
import time
import map
import excel


class Problem_Genetic(object):
    def __init__(self, genes, individuals_length, decode, fitness):
        self.genes = genes
        self.individuals_length = individuals_length
        self.decode = decode
        self.fitness = fitness

    def mutation(self, chromosome, prob):
        def inversion_mutation(chromosome_aux):
            chromosome = chromosome_aux
            index1 = randrange(0, len(chromosome))
            index2 = randrange(index1, len(chromosome))
            chromosome_mid = chromosome[index1:index2]
            chromosome_mid.reverse()
            chromosome_result = chromosome[0:index1] + chromosome_mid + chromosome[index2:]
            return chromosome_result

        aux = chromosome[:]
        for i in range(len(aux)):
            if random.random() < prob:
                aux = inversion_mutation(aux)
        return aux

    def crossover(self, parent1, parent2):
        def process_gen_repeated(copy_child1, copy_child2):
            count1 = 0
            for gen1 in copy_child1[:pos]:
                repeat = copy_child1.count(gen1)
                if repeat > 1:
                    count2 = 0
                    for gen2 in parent1[pos:]:
                        if gen2 not in copy_child1:
                            child1[count1] = parent1[pos:][count2]
                        count2 += 1
                count1 += 1

            count1 = 0
            for gen1 in copy_child2[:pos]:
                repeat = copy_child2.count(gen1)
                if repeat > 1:
                    count2 = 0
                    for gen2 in parent2[pos:]:
                        if gen2 not in copy_child2:
                            child2[count1] = parent2[pos:][count2]
                        count2 += 1
                count1 += 1

            return [child1, child2]

        pos = random.randrange(1, self.individuals_length - 1)
        child1 = parent1[:pos] + parent2[pos:]
        child2 = parent2[:pos] + parent1[pos:]
        return process_gen_repeated(child1, child2)

    def is_valid_chromosome(self, chromosome):
        truck_count = sum(1 for gene in chromosome if gene in trucks)
        return truck_count == len(trucks) and chromosome[-1] in trucks

def clean_consecutive_duplicates(route):
    if not route:
        return []
    cleaned_route = [route[0]]
    for i in range(1, len(route)):
        if route[i] != route[i - 1]:
            cleaned_route.append(route[i])
    return cleaned_route


def decodeVRP(chromosome):
    decoded = []
    sub_route = []
    start_city = 'Paris'
    current_capacity = trucks[list(trucks.keys())[0]]
    total_value = 0

    for gene in chromosome:
        if gene in trucks:
            if sub_route:
                sub_route.insert(0, start_city)
                sub_route.append(start_city)
                decoded.extend(sub_route)
                sub_route = []
            decoded.append(f"{gene}")
            start_city = 'Paris'
            total_value = 0
            current_capacity = trucks[gene]
        else:
            city_name, city_value = cities[gene]
            total_value += city_value
            if total_value > current_capacity:
                sub_route.insert(0, start_city)
                sub_route.append(start_city)
                decoded.extend(sub_route)
                sub_route = []
                total_value = city_value
            sub_route.append(city_name)
    if sub_route:
        sub_route.insert(0, start_city)
        sub_route.append(start_city)
        decoded.extend(sub_route)

    return clean_consecutive_duplicates(decoded)


def penalty_capacity(chromosome):
    actual = chromosome
    value_penalty = 0
    capacity_list = []
    index_cap = 0

    truck_keys = list(trucks.keys())
    current_capacity = trucks[truck_keys[index_cap]]

    for gene in actual:
        if gene not in trucks:
            capacity_list.append(gene)
            if sum(cities[city][1] for city in capacity_list) > current_capacity:
                value_penalty += 100
        else:
            index_cap += 1
            if index_cap >= len(truck_keys):
                break
            current_capacity = trucks[truck_keys[index_cap]]
            capacity_list = []

    return value_penalty


def fitnessVRP(chromosome):
    def distanceTrip(index, city):
        w = distances.get(index, {})
        return w.get(city, 1000000)

    actualChromosome = chromosome
    fitness_value = 0

    penalty_cap = penalty_capacity(actualChromosome)
    sub_route = []
    start_city = 'Paris'
    for key in range(len(actualChromosome)):
        if actualChromosome[key] in trucks:
            if sub_route:
                start_idx = sub_route[0]
                end_idx = sub_route[-1]
                fitness_value += distanceTrip(end_idx, start_idx)
                sub_route = []
            start_city = 'Paris'
        else:
            if start_city is None:
                start_city = actualChromosome[key]
            if sub_route:
                fitness_value += distanceTrip(sub_route[-1], actualChromosome[key])
            sub_route.append(actualChromosome[key])
    if sub_route:
        start_idx = sub_route[0]
        end_idx = sub_route[-1]
        fitness_value += distanceTrip(end_idx, start_idx)

    fitness_value += penalty_cap
    return fitness_value



def max_age_from_fitness(fitness_value, min_fitness, max_fitness, min_age, max_age):
    if max_fitness == min_fitness:
        return max_age
    return int(min_age + (max_age - min_age) * (max_fitness - fitness_value) / (max_fitness - min_fitness))


def genetic_algorithm_t(Problem_Genetic, k, opt, ngen, size, prob_mutate, min_age, max_age, isMap=True):
    def initial_population(Problem_Genetic, size):
        def generate_chromosome():
            chromosome = []
            for i in Problem_Genetic.genes:
                chromosome.append(i)
            random.shuffle(chromosome)
            while not Problem_Genetic.is_valid_chromosome(chromosome):
                random.shuffle(chromosome)
            while chromosome[-1] not in trucks:
                random.shuffle(chromosome)
            return chromosome

        return [(generate_chromosome(), 0) for _ in range(size)]

    def new_generation_t(Problem_Genetic, k, opt, population, n_parents, n_directs, prob_mutate, min_age, max_age):
        def tournament_selection(Problem_Genetic, population, n, k, opt):
            winners = []
            for _ in range(n):
                elements = random.sample(population, k)
                winners.append(opt(elements, key=lambda x: Problem_Genetic.fitness(x[0])))
            return winners

        def cross_parents(Problem_Genetic, parents):
            childs = []
            for i in range(0, len(parents), 2):
                children = Problem_Genetic.crossover(parents[i][0], parents[i + 1][0])
                for child in children:
                    if Problem_Genetic.is_valid_chromosome(child):
                        childs.append((child, 0))
            return childs

        def mutate(Problem_Genetic, population, prob):
            for i in range(len(population)):
                mutated_chromosome = Problem_Genetic.mutation(population[i][0], prob)
                if Problem_Genetic.is_valid_chromosome(mutated_chromosome):
                    population[i] = (mutated_chromosome, population[i][1])
            return population

        def age_population(population, min_age, max_age, min_fitness, max_fitness):
            aged_population = []
            for chromosome, age in population:
                fitness_value = Problem_Genetic.fitness(chromosome)
                individual_max_age = max_age_from_fitness(fitness_value, min_fitness, max_fitness, min_age, max_age)
                if age <= individual_max_age:
                    aged_population.append((chromosome, age + 1))
            return aged_population

        min_fitness = min(population, key=lambda x: Problem_Genetic.fitness(x[0]))[1]
        max_fitness = max(population, key=lambda x: Problem_Genetic.fitness(x[0]))[1]

        directs = tournament_selection(Problem_Genetic, population, n_directs, k, opt)
        crosses = cross_parents(Problem_Genetic, tournament_selection(Problem_Genetic, population, n_parents, k, opt))
        mutations = mutate(Problem_Genetic, crosses, prob_mutate)
        new_generation = directs + mutations

        return age_population(new_generation, min_age, max_age, min_fitness, max_fitness)

    population = initial_population(Problem_Genetic, size)

    best_fitness = float('inf')
    best_gen = -1  # Initialize the best generation number

    for gen in tqdm(range(ngen), desc="Generation progress"):
        population = new_generation_t(Problem_Genetic, k, opt, population, 500, 500, prob_mutate, min_age, max_age)
        if not population:  # In case all individuals get aged out
            population = initial_population(Problem_Genetic, size)

        # Update the best fitness and generation number
        current_best_fitness = min(Problem_Genetic.fitness(ind[0]) for ind in population)
        if current_best_fitness < best_fitness:
            best_fitness = current_best_fitness
            best_gen = gen

    execution_time = time.time() - start_time
    best_chromosome, _ = opt(population, key=lambda x: Problem_Genetic.fitness(x[0]))
    print("Chromosome: ", best_chromosome)
    genotype = Problem_Genetic.decode(best_chromosome)
    print("Solution: ", (genotype, Problem_Genetic.fitness(best_chromosome)))
    if isMap:
        map.generate_map(map.generate_coordinates(genotype, trucks))

    data = [k, ngen, size, prob_mutate, min_age, max_age, len(cities), len(trucks), Problem_Genetic.fitness(best_chromosome),
            best_gen, execution_time, execution_time / len(cities)]

    excel.add_data_to_excel(data)

    return genotype, Problem_Genetic.fitness(best_chromosome)


# Usage
cities = {
    0: ('Nice', 1),
    1: ('Aix-en-Provence', 1),
    2: ('Marseille', 1),
    3: ('Caen', 1),
    4: ('Dijon', 1),
    5: ('Besançon', 1),
    6: ('Brest', 3),
    7: ('Nîmes', 1),
    8: ('Toulouse', 1),
    9: ('Bordeaux', 3),
    10: ('Montpellier', 2),
    11: ('Rennes', 1),
    12: ('Tours', 3),
    13: ('Grenoble', 3),
    14: ('Saint-Étienne', 3),
    15: ('Nantes', 1),
    16: ('Orléans', 2),
    17: ('Angers', 2),
    18: ('Reims', 1),
    19: ('Nancy', 2),
    20: ('Metz', 3),
    21: ('Roubaix', 3),
    22: ('Lille', 1),
    23: ('Tourcoing', 2),
    24: ('Dunkerque', 1),
    25: ('Clermont-Ferrand', 1),
    26: ('Pau', 3),
    27: ('Perpignan', 2),
    28: ('Strasbourg', 1),
    29: ('Mulhouse', 1),
    30: ('Lyon', 1),
    31: ('Villeurbanne', 1),
    32: ('Le Mans', 3),
    33: ('Paris', 3),
    34: ('Rouen', 3),
    35: ('Le Havre', 1),
    36: ('Versailles', 3),
    37: ('Amiens', 2),
    38: ('Toulon', 3),
    39: ('Avignon', 2),
    40: ('Poitiers', 3),
    41: ('Limoges', 1),
    42: ('Boulogne-Billancourt', 3),
    43: ('Courbevoie', 2),
    44: ('Nanterre', 3),
    45: ('Montreuil', 3),
    46: ('Saint-Denis', 1),
    47: ('Vitry-sur-Seine', 3),
    48: ('Créteil', 1),
    49: ('Argenteuil', 1),
}
distances = {
    0: {1: 147.41, 2: 157.63, 3: 842.31, 4: 438.15, 5: 405.97, 6: 1043.85, 7: 233.33, 8: 468.03, 9: 634.77, 10: 271.08, 11: 845.04, 12: 654.80, 13: 203.51, 14: 296.82, 15: 789.25, 16: 625.63, 17: 736.92, 18: 664.31, 19: 559.97, 20: 609.82, 21: 836.94, 22: 832.95, 23: 839.11, 24: 895.70, 25: 402.35, 26: 615.73, 27: 371.56, 28: 544.36, 29: 450.39, 30: 297.66, 31: 296.21, 32: 725.25, 33: 686.20, 34: 792.31, 35: 842.77, 36: 689.85, 37: 785.23, 38: 124.57, 39: 197.17, 40: 629.80, 41: 530.33, 42: 687.79, 43: 693.48, 44: 695.95, 45: 683.10, 46: 692.31, 47: 676.89, 48: 674.09, 49: 698.36, },
    1: {0: 147.41, 2: 26.71, 3: 768.70, 4: 421.95, 5: 415.92, 6: 937.04, 7: 93.28, 8: 322.33, 9: 499.66, 10: 125.10, 11: 747.92, 12: 565.93, 13: 183.02, 14: 226.61, 15: 681.68, 16: 559.14, 17: 638.99, 18: 644.64, 19: 575.69, 20: 625.22, 21: 815.04, 22: 809.45, 23: 817.12, 24: 867.03, 25: 311.65, 26: 469.08, 27: 227.55, 28: 589.22, 29: 491.55, 30: 251.86, 31: 252.12, 32: 641.14, 33: 638.09, 34: 735.44, 35: 777.14, 36: 638.23, 37: 746.98, 38: 61.50, 39: 67.83, 40: 524.68, 41: 419.08, 42: 638.11, 43: 644.57, 44: 646.37, 45: 636.27, 46: 645.21, 47: 628.65, 48: 626.77, 49: 650.01, },
    2: {0: 157.63, 1: 26.71, 3: 788.41, 4: 447.89, 5: 442.58, 6: 950.19, 7: 101.97, 8: 320.06, 9: 504.50, 10: 125.16, 11: 763.58, 12: 583.75, 13: 209.69, 14: 249.93, 15: 695.18, 16: 580.40, 17: 654.79, 18: 669.95, 19: 602.32, 20: 651.83, 21: 839.99, 22: 834.30, 23: 842.05, 24: 891.44, 25: 330.84, 26: 464.68, 27: 213.93, 28: 615.75, 29: 518.07, 30: 277.05, 31: 277.42, 32: 659.53, 33: 661.20, 34: 757.40, 35: 797.94, 36: 660.98, 37: 770.78, 38: 49.38, 39: 85.48, 40: 539.34, 41: 432.84, 42: 661.06, 43: 667.57, 44: 669.31, 45: 659.51, 46: 668.40, 47: 651.77, 48: 649.98, 49: 673.06, },
    3: {0: 842.31, 1: 768.70, 2: 788.41, 4: 448.16, 5: 519.29, 6: 315.02, 7: 694.86, 8: 635.67, 9: 483.98, 10: 700.33, 11: 156.71, 12: 214.25, 13: 639.73, 14: 549.44, 15: 236.06, 16: 217.39, 17: 191.45, 18: 318.41, 19: 481.53, 20: 473.77, 21: 302.89, 22: 292.97, 23: 302.91, 24: 283.87, 25: 457.60, 26: 654.19, 27: 764.61, 28: 595.74, 29: 588.18, 30: 544.96, 31: 546.60, 32: 137.65, 33: 199.73, 34: 107.57, 35: 49.66, 36: 186.13, 37: 207.14, 38: 829.62, 39: 702.93, 40: 293.56, 41: 389.61, 42: 193.58, 43: 192.32, 44: 188.51, 45: 205.96, 46: 199.28, 47: 205.54, 48: 210.29, 49: 191.18, },
    4: {0: 438.15, 1: 421.95, 2: 447.89, 3: 448.16, 5: 77.05, 6: 718.45, 7: 390.79, 8: 498.78, 9: 511.42, 10: 422.61, 11: 508.42, 12: 326.50, 13: 245.05, 14: 214.70, 15: 495.47, 16: 242.93, 17: 419.28, 18: 226.95, 19: 175.62, 20: 219.22, 21: 399.64, 22: 395.26, 23: 401.79, 24: 457.55, 25: 225.66, 26: 613.48, 27: 541.77, 28: 247.51, 29: 180.46, 30: 173.74, 31: 172.65, 32: 368.59, 33: 262.35, 34: 373.81, 35: 434.45, 36: 270.38, 37: 349.81, 38: 472.50, 39: 374.68, 40: 364.66, 41: 330.80, 42: 265.85, 43: 270.19, 44: 273.34, 45: 257.89, 46: 266.89, 47: 253.80, 48: 250.02, 49: 274.08, },
    5: {0: 405.97, 1: 415.92, 2: 442.58, 3: 519.29, 4: 77.05, 6: 794.82, 7: 401.88, 8: 541.65, 9: 575.68, 10: 439.13, 11: 584.97, 12: 403.50, 13: 232.93, 14: 237.74, 15: 572.35, 16: 318.71, 17: 496.32, 18: 267.16, 19: 159.86, 20: 209.65, 21: 436.89, 22: 434.06, 23: 439.08, 24: 499.51, 25: 278.45, 26: 665.71, 27: 564.92, 28: 195.81, 29: 112.37, 30: 189.24, 31: 186.94, 32: 444.94, 33: 327.39, 34: 438.93, 35: 502.28, 36: 337.32, 37: 402.73, 38: 459.67, 39: 378.94, 40: 439.13, 41: 397.45, 42: 331.76, 43: 335.31, 44: 338.72, 45: 322.28, 46: 330.90, 47: 319.48, 48: 315.30, 49: 338.56, },
    6: {0: 1043.85, 1: 937.04, 2: 950.19, 3: 315.02, 4: 718.45, 5: 794.82, 7: 848.48, 8: 702.23, 9: 496.62, 10: 837.33, 11: 210.31, 12: 401.38, 13: 854.92, 14: 750.42, 15: 255.51, 16: 476.38, 17: 310.82, 18: 630.25, 19: 786.49, 20: 784.14, 21: 607.87, 22: 598.58, 23: 607.48, 24: 573.49, 25: 642.09, 26: 650.35, 27: 855.49, 28: 900.77, 29: 880.02, 30: 764.08, 31: 766.63, 32: 349.89, 33: 504.21, 34: 422.57, 35: 358.56, 36: 488.43, 37: 520.56, 38: 997.66, 39: 869.44, 40: 414.35, 41: 518.01, 42: 497.14, 43: 497.73, 44: 493.94, 45: 510.74, 46: 505.75, 47: 507.86, 48: 512.74, 49: 498.00, },
    7: {0: 233.33, 1: 93.28, 2: 101.97, 3: 694.86, 4: 390.79, 5: 401.88, 6: 848.48, 8: 235.83, 9: 406.48, 10: 45.60, 11: 663.56, 12: 486.88, 13: 183.66, 14: 177.96, 15: 593.67, 16: 492.01, 17: 555.02, 18: 602.79, 19: 557.69, 20: 605.47, 21: 768.72, 22: 762.28, 23: 770.71, 24: 816.12, 25: 238.74, 26: 384.56, 27: 174.52, 28: 589.27, 29: 493.04, 30: 217.60, 31: 219.06, 32: 563.48, 33: 579.70, 34: 670.62, 35: 707.23, 36: 577.85, 37: 692.28, 38: 150.57, 39: 39.58, 40: 438.66, 41: 331.65, 42: 578.82, 43: 585.58, 44: 586.98, 45: 578.65, 46: 587.25, 47: 570.38, 48: 569.06, 49: 591.24, },
    8: {0: 468.03, 1: 322.33, 2: 320.06, 3: 635.67, 4: 498.78, 5: 541.65, 6: 702.23, 7: 235.83, 9: 210.25, 10: 197.28, 11: 553.78, 12: 424.72, 13: 382.31, 14: 311.22, 15: 464.64, 16: 481.36, 17: 456.83, 18: 658.99, 19: 673.76, 20: 714.13, 21: 800.23, 22: 791.72, 23: 801.85, 24: 831.36, 25: 275.57, 26: 149.08, 27: 155.66, 28: 737.27, 29: 650.08, 30: 360.82, 31: 363.86, 32: 498.49, 33: 589.06, 34: 649.18, 35: 663.51, 36: 580.71, 37: 703.62, 38: 367.71, 39: 274.40, 40: 342.77, 41: 250.61, 42: 585.29, 43: 592.38, 44: 592.27, 45: 590.64, 46: 597.27, 47: 581.13, 48: 581.80, 49: 598.18, },
    9: {0: 634.77, 1: 499.66, 2: 504.50, 3: 483.98, 4: 511.42, 5: 575.68, 6: 496.62, 7: 406.48, 8: 210.25, 10: 380.17, 11: 371.36, 12: 299.46, 13: 495.30, 14: 395.21, 15: 275.68, 16: 391.56, 17: 292.82, 18: 601.99, 19: 669.61, 20: 699.15, 21: 709.28, 22: 699.62, 23: 710.49, 24: 724.82, 25: 304.32, 26: 171.24, 27: 365.90, 28: 758.28, 29: 687.73, 30: 435.26, 31: 438.62, 32: 356.99, 33: 499.40, 34: 526.47, 35: 521.60, 36: 486.50, 37: 603.22, 38: 553.86, 39: 438.78, 40: 206.76, 41: 181.49, 42: 493.61, 43: 500.05, 44: 498.63, 45: 503.08, 46: 507.11, 47: 493.76, 48: 496.09, 49: 505.23, },
    10: {0: 271.08, 1: 125.10, 2: 125.16, 3: 700.33, 4: 422.61, 5: 439.13, 6: 837.33, 7: 45.60, 8: 197.28, 9: 380.17, 11: 658.78, 12: 488.97, 13: 227.09, 14: 207.93, 15: 584.23, 16: 504.01, 17: 551.26, 18: 628.36, 19: 592.67, 20: 639.65, 21: 791.33, 22: 784.49, 23: 793.27, 24: 836.20, 25: 250.87, 26: 344.66, 27: 130.28, 28: 629.05, 29: 533.53, 30: 251.72, 31: 253.56, 32: 566.32, 33: 596.71, 34: 682.97, 35: 715.76, 36: 593.65, 37: 710.79, 38: 174.23, 39: 84.44, 40: 433.15, 41: 325.35, 42: 595.29, 43: 602.20, 44: 603.34, 45: 596.12, 46: 604.48, 47: 587.52, 48: 586.55, 49: 607.95, },
    11: {0: 845.04, 1: 747.92, 2: 763.58, 3: 156.71, 4: 508.42, 5: 584.97, 6: 210.31, 7: 663.56, 8: 553.78, 9: 371.36, 10: 658.78, 12: 193.35, 13: 651.14, 14: 548.91, 15: 96.88, 16: 267.23, 17: 108.96, 18: 439.28, 19: 585.72, 20: 588.55, 21: 455.77, 22: 445.65, 23: 455.98, 24: 440.47, 25: 443.04, 26: 541.60, 27: 698.09, 28: 699.09, 29: 672.59, 30: 558.63, 31: 561.02, 32: 140.32, 33: 309.19, 34: 252.29, 35: 206.21, 36: 292.56, 37: 353.87, 38: 809.29, 39: 680.12, 40: 225.63, 41: 333.44, 42: 301.76, 43: 303.78, 44: 300.19, 45: 315.67, 46: 312.34, 47: 311.11, 48: 315.87, 49: 305.28, },
    12: {0: 654.80, 1: 565.93, 2: 583.75, 3: 214.25, 4: 326.50, 5: 403.50, 6: 401.38, 7: 486.88, 8: 424.72, 9: 299.46, 10: 488.97, 11: 193.35, 13: 458.56, 14: 358.01, 15: 169.42, 16: 108.74, 17: 93.24, 18: 323.13, 19: 434.80, 20: 450.02, 21: 410.77, 22: 400.97, 23: 411.89, 24: 425.63, 25: 255.50, 26: 461.39, 27: 550.40, 28: 542.40, 29: 500.44, 30: 365.51, 31: 367.86, 32: 77.53, 33: 205.33, 34: 229.85, 35: 238.84, 36: 190.82, 37: 303.99, 38: 627.38, 39: 498.75, 40: 92.83, 41: 175.90, 42: 198.80, 43: 204.67, 44: 202.74, 45: 209.94, 46: 212.45, 47: 201.22, 48: 204.40, 49: 209.39, },
    13: {0: 203.51, 1: 183.02, 2: 209.69, 3: 639.73, 4: 245.05, 5: 232.93, 6: 854.92, 7: 183.66, 8: 382.31, 9: 495.30, 10: 227.09, 11: 651.14, 12: 458.56, 14: 107.16, 15: 603.71, 16: 422.64, 17: 544.77, 18: 471.48, 19: 392.74, 20: 442.37, 21: 643.83, 22: 639.04, 23: 645.96, 24: 699.69, 25: 216.46, 26: 527.07, 27: 357.36, 28: 410.10, 29: 312.79, 30: 94.85, 31: 93.14, 32: 526.10, 33: 483.64, 34: 588.95, 35: 639.34, 36: 486.81, 37: 585.34, 38: 228.60, 39: 152.93, 40: 445.42, 41: 356.21, 42: 485.00, 43: 490.82, 44: 493.19, 45: 480.75, 46: 489.94, 47: 474.28, 48: 471.62, 49: 495.80, },
    14: {0: 296.82, 1: 226.61, 2: 249.93, 3: 549.44, 4: 214.70, 5: 237.74, 6: 750.42, 7: 177.96, 8: 311.22, 9: 395.21, 10: 207.93, 11: 548.91, 12: 358.01, 13: 107.16, 15: 497.89, 16: 335.57, 17: 441.39, 18: 425.29, 19: 386.22, 20: 432.43, 21: 592.73, 22: 586.62, 23: 594.76, 24: 642.38, 25: 109.56, 26: 446.92, 27: 328.91, 28: 432.58, 29: 341.42, 30: 49.90, 31: 52.80, 32: 428.81, 33: 411.48, 34: 509.84, 35: 554.19, 36: 411.73, 37: 520.92, 38: 285.04, 39: 168.19, 40: 339.05, 41: 249.21, 42: 411.52, 43: 417.96, 44: 419.78, 45: 409.68, 46: 418.61, 47: 402.04, 48: 400.17, 49: 423.40, },
    15: {0: 789.25, 1: 681.68, 2: 695.18, 3: 236.06, 4: 495.47, 5: 572.35, 6: 255.51, 7: 593.67, 8: 464.64, 9: 275.68, 10: 584.23, 11: 96.88, 12: 169.42, 13: 603.71, 14: 497.89, 16: 270.26, 17: 80.31, 18: 471.14, 19: 599.48, 20: 610.26, 21: 518.07, 22: 507.84, 23: 518.61, 24: 512.56, 25: 388.73, 26: 445.24, 27: 612.82, 28: 709.27, 29: 669.80, 30: 515.29, 31: 518.03, 32: 157.47, 33: 342.32, 34: 314.05, 35: 282.70, 36: 325.64, 37: 411.36, 38: 742.42, 39: 614.03, 40: 159.48, 41: 262.59, 42: 334.86, 43: 338.72, 44: 335.66, 45: 348.30, 46: 347.42, 47: 341.58, 48: 345.85, 49: 341.73, },
    16: {0: 625.63, 1: 559.14, 2: 580.40, 3: 217.39, 4: 242.93, 5: 318.71, 6: 476.38, 7: 492.01, 8: 481.36, 9: 391.56, 10: 504.01, 11: 267.23, 12: 108.74, 13: 422.64, 14: 335.57, 15: 270.26, 17: 190.07, 18: 215.87, 19: 329.25, 20: 342.03, 21: 322.81, 22: 313.69, 23: 324.25, 24: 350.03, 25: 253.71, 26: 542.72, 27: 586.97, 28: 439.33, 29: 405.90, 30: 328.02, 31: 329.56, 32: 126.92, 33: 109.90, 34: 178.98, 35: 218.62, 36: 99.72, 37: 222.46, 38: 619.17, 39: 495.31, 40: 189.64, 41: 235.05, 42: 105.15, 43: 112.09, 44: 111.56, 45: 112.74, 46: 117.99, 47: 103.20, 48: 105.07, 49: 117.76, },
    17: {0: 736.92, 1: 638.99, 2: 654.79, 3: 191.45, 4: 419.28, 5: 496.32, 6: 310.82, 7: 555.02, 8: 456.83, 9: 292.82, 10: 551.26, 11: 108.96, 12: 93.24, 13: 544.77, 14: 441.39, 15: 80.31, 16: 190.07, 18: 392.33, 19: 519.22, 20: 530.04, 21: 449.91, 22: 439.72, 23: 450.64, 24: 451.09, 25: 334.64, 26: 463.54, 27: 596.16, 28: 629.28, 29: 591.57, 30: 453.35, 31: 455.87, 32: 81.62, 33: 264.71, 34: 249.65, 35: 231.63, 36: 248.24, 37: 341.98, 38: 700.38, 39: 571.20, 40: 118.88, 41: 226.23, 42: 257.35, 43: 261.64, 44: 258.75, 45: 270.50, 46: 270.26, 47: 263.36, 48: 267.49, 49: 265.03, },
    18: {0: 664.31, 1: 644.64, 2: 669.95, 3: 318.41, 4: 226.95, 5: 267.16, 6: 630.25, 7: 602.79, 8: 658.99, 9: 601.99, 10: 628.36, 11: 439.28, 12: 323.13, 13: 471.48, 14: 425.29, 15: 471.14, 16: 215.87, 17: 392.33, 19: 170.25, 20: 155.57, 21: 172.73, 22: 168.65, 23: 174.89, 24: 232.71, 25: 392.02, 26: 742.71, 27: 735.55, 28: 281.49, 29: 294.81, 30: 392.90, 31: 392.54, 32: 314.11, 33: 130.48, 34: 214.68, 35: 283.69, 36: 147.29, 37: 144.37, 38: 697.44, 39: 592.35, 40: 404.82, 41: 431.86, 42: 137.99, 43: 135.53, 44: 139.09, 45: 124.13, 46: 126.95, 47: 129.92, 48: 125.48, 49: 134.05, },
    19: {0: 559.97, 1: 575.69, 2: 602.32, 3: 481.53, 4: 175.62, 5: 159.86, 6: 786.49, 7: 557.69, 8: 673.76, 9: 669.61, 10: 592.67, 11: 585.72, 12: 434.80, 13: 392.74, 14: 386.22, 15: 599.48, 16: 329.25, 17: 519.22, 18: 170.25, 20: 50.10, 21: 312.83, 22: 312.81, 23: 314.97, 24: 380.35, 25: 399.12, 26: 784.05, 27: 715.01, 28: 114.44, 29: 133.49, 30: 340.97, 31: 339.20, 32: 449.80, 33: 283.20, 34: 381.96, 35: 450.86, 36: 298.45, 37: 313.48, 38: 619.32, 39: 536.91, 40: 497.57, 41: 488.45, 42: 290.00, 43: 290.15, 44: 293.98, 45: 276.74, 46: 282.67, 47: 278.89, 48: 274.00, 49: 290.70, },
    20: {0: 609.82, 1: 625.22, 2: 651.83, 3: 473.77, 4: 219.22, 5: 209.65, 6: 784.14, 7: 605.47, 8: 714.13, 9: 699.15, 10: 639.65, 11: 588.55, 12: 450.02, 13: 442.37, 14: 432.43, 15: 610.26, 16: 342.03, 17: 530.04, 18: 155.57, 19: 50.10, 21: 276.52, 22: 277.72, 23: 278.59, 24: 344.76, 25: 438.65, 26: 819.96, 27: 760.67, 28: 130.98, 29: 176.25, 30: 388.21, 31: 386.57, 32: 456.63, 33: 280.47, 34: 370.15, 35: 439.11, 36: 296.72, 37: 291.83, 38: 669.26, 39: 585.51, 40: 519.21, 41: 519.17, 42: 287.73, 43: 286.64, 44: 290.40, 45: 273.93, 46: 278.49, 47: 277.72, 48: 272.90, 49: 286.18, },
    21: {0: 836.94, 1: 815.04, 2: 839.99, 3: 302.89, 4: 399.64, 5: 436.89, 6: 607.87, 7: 768.72, 8: 800.23, 9: 709.28, 10: 791.33, 11: 455.77, 12: 410.77, 13: 643.83, 14: 592.73, 15: 518.07, 16: 322.81, 17: 449.91, 18: 172.73, 19: 312.83, 20: 276.52, 22: 10.23, 23: 2.20, 24: 68.30, 25: 546.75, 26: 865.11, 27: 891.68, 28: 405.24, 29: 446.13, 30: 563.21, 31: 563.06, 32: 369.14, 33: 212.94, 34: 204.80, 35: 254.16, 36: 223.93, 37: 108.18, 38: 868.85, 39: 760.75, 40: 502.77, 41: 557.59, 42: 217.75, 43: 210.92, 44: 211.83, 45: 210.54, 46: 204.83, 47: 220.13, 48: 218.98, 49: 205.40, },
    22: {0: 832.95, 1: 809.45, 2: 834.30, 3: 292.97, 4: 395.26, 5: 434.06, 6: 598.58, 7: 762.28, 8: 791.72, 9: 699.62, 10: 784.49, 11: 445.65, 12: 400.97, 13: 639.04, 14: 586.62, 15: 507.84, 16: 313.69, 17: 439.72, 18: 168.65, 19: 312.81, 20: 277.72, 21: 10.23, 23: 10.98, 24: 67.55, 25: 539.30, 26: 855.79, 27: 884.11, 28: 407.11, 29: 445.87, 30: 557.70, 31: 557.59, 32: 358.99, 33: 203.89, 34: 194.60, 35: 244.34, 36: 214.61, 37: 98.07, 38: 863.57, 39: 754.72, 40: 493.06, 41: 548.58, 42: 208.58, 43: 201.70, 44: 202.53, 45: 201.64, 46: 195.75, 47: 211.22, 48: 210.18, 49: 196.14, },
    23: {0: 839.11, 1: 817.12, 2: 842.05, 3: 302.91, 4: 401.79, 5: 439.08, 6: 607.48, 7: 770.71, 8: 801.85, 9: 710.49, 10: 793.27, 11: 455.98, 12: 411.89, 13: 645.96, 14: 594.76, 15: 518.61, 16: 324.25, 17: 450.64, 18: 174.89, 19: 314.97, 20: 278.59, 21: 2.20, 22: 10.98, 24: 66.28, 25: 548.59, 26: 866.47, 27: 893.50, 28: 407.25, 29: 448.28, 30: 565.29, 31: 565.14, 32: 369.94, 33: 214.40, 34: 205.21, 35: 254.10, 36: 225.29, 37: 109.04, 38: 870.95, 39: 762.78, 40: 503.95, 41: 559.06, 42: 219.17, 43: 212.31, 44: 213.20, 45: 212.04, 46: 206.27, 47: 221.63, 48: 220.52, 49: 206.78, },
    24: {0: 895.70, 1: 867.03, 2: 891.44, 3: 283.87, 4: 457.55, 5: 499.51, 6: 573.49, 7: 816.12, 8: 831.36, 9: 724.82, 10: 836.20, 11: 440.47, 12: 425.63, 13: 699.69, 14: 642.38, 15: 512.56, 16: 350.03, 17: 451.09, 18: 232.71, 19: 380.35, 20: 344.76, 21: 68.30, 22: 67.55, 23: 66.28, 25: 588.01, 26: 886.01, 27: 931.16, 28: 473.53, 29: 513.41, 30: 615.96, 31: 616.05, 32: 373.42, 33: 243.52, 34: 201.60, 35: 234.27, 36: 250.75, 37: 127.96, 38: 922.26, 39: 810.53, 40: 518.45, 41: 584.03, 42: 246.63, 43: 239.51, 44: 239.37, 45: 242.82, 46: 235.37, 47: 252.06, 48: 252.15, 49: 233.66, },
    25: {0: 402.35, 1: 311.65, 2: 330.84, 3: 457.60, 4: 225.66, 5: 278.45, 6: 642.09, 7: 238.74, 8: 275.57, 9: 304.32, 10: 250.87, 11: 443.04, 12: 255.50, 13: 216.46, 14: 109.56, 15: 388.73, 16: 253.71, 17: 334.64, 18: 392.02, 19: 399.12, 20: 438.65, 21: 546.75, 22: 539.30, 23: 548.59, 24: 588.01, 26: 388.52, 27: 345.07, 28: 470.29, 29: 390.56, 30: 136.38, 31: 139.61, 32: 329.74, 33: 346.61, 34: 432.63, 35: 468.57, 36: 343.00, 37: 461.47, 38: 372.90, 39: 245.38, 40: 229.62, 41: 142.27, 42: 344.91, 43: 351.87, 44: 352.89, 45: 346.34, 46: 354.49, 47: 337.54, 48: 336.81, 49: 357.66, },
    26: {0: 615.73, 1: 469.08, 2: 464.68, 3: 654.19, 4: 613.48, 5: 665.71, 6: 650.35, 7: 384.56, 8: 149.08, 9: 171.24, 10: 344.66, 11: 541.60, 12: 461.39, 13: 527.07, 14: 446.92, 15: 445.24, 16: 542.72, 17: 463.54, 18: 742.71, 19: 784.05, 20: 819.96, 21: 865.11, 22: 855.79, 23: 866.47, 24: 886.01, 25: 388.52, 27: 273.06, 28: 858.78, 29: 776.95, 30: 495.01, 31: 498.24, 32: 524.46, 33: 652.54, 34: 690.97, 35: 690.47, 36: 641.19, 37: 761.51, 38: 510.88, 39: 423.35, 40: 369.22, 41: 311.10, 42: 647.44, 43: 654.22, 44: 653.28, 45: 655.46, 46: 660.55, 47: 645.91, 48: 647.62, 49: 659.71, },
    27: {0: 371.56, 1: 227.55, 2: 213.93, 3: 764.61, 4: 541.77, 5: 564.92, 6: 855.49, 7: 174.52, 8: 155.66, 9: 365.90, 10: 130.28, 11: 698.09, 12: 550.40, 13: 357.36, 14: 328.91, 15: 612.82, 16: 586.97, 17: 596.16, 18: 735.55, 19: 715.01, 20: 760.67, 21: 891.68, 22: 884.11, 23: 893.50, 24: 931.16, 25: 345.07, 26: 273.06, 28: 756.98, 29: 662.23, 30: 375.87, 31: 378.05, 32: 627.18, 33: 688.08, 34: 763.25, 35: 786.94, 36: 682.62, 37: 803.70, 38: 253.05, 39: 210.47, 40: 478.24, 41: 375.35, 42: 685.60, 43: 692.69, 44: 693.28, 45: 688.44, 46: 696.15, 47: 679.32, 48: 679.06, 49: 698.54, },
    28: {0: 544.36, 1: 589.22, 2: 615.75, 3: 595.74, 4: 247.51, 5: 195.81, 6: 900.77, 7: 589.27, 8: 737.27, 9: 758.28, 10: 629.05, 11: 699.09, 12: 542.40, 13: 410.10, 14: 432.58, 15: 709.27, 16: 439.33, 17: 629.28, 18: 281.49, 19: 114.44, 20: 130.98, 21: 405.24, 22: 407.11, 23: 407.25, 24: 473.53, 25: 470.29, 26: 858.78, 27: 756.98, 29: 97.68, 30: 383.31, 31: 380.78, 32: 562.08, 33: 397.64, 34: 495.18, 35: 564.20, 36: 412.88, 37: 421.75, 38: 623.88, 39: 562.27, 40: 598.76, 41: 577.09, 42: 404.44, 43: 404.57, 44: 408.40, 45: 391.18, 46: 397.06, 47: 393.31, 48: 388.42, 49: 405.07, },
    29: {0: 450.39, 1: 491.55, 2: 518.07, 3: 588.18, 4: 180.46, 5: 112.37, 6: 880.02, 7: 493.04, 8: 650.08, 9: 687.73, 10: 533.53, 11: 672.59, 12: 500.44, 13: 312.79, 14: 341.42, 15: 669.80, 16: 405.90, 17: 591.57, 18: 294.81, 19: 133.49, 20: 176.25, 21: 446.13, 22: 445.87, 23: 448.28, 24: 513.41, 25: 390.56, 26: 776.95, 27: 662.23, 28: 97.68, 30: 291.61, 31: 288.88, 32: 532.57, 33: 389.00, 34: 496.12, 35: 563.55, 36: 402.06, 37: 439.09, 38: 526.63, 39: 465.27, 40: 544.64, 41: 508.78, 42: 394.81, 43: 396.65, 44: 400.39, 45: 382.99, 46: 390.44, 47: 382.73, 48: 378.02, 49: 398.55, },
    30: {0: 297.66, 1: 251.86, 2: 277.05, 3: 544.96, 4: 173.74, 5: 189.24, 6: 764.08, 7: 217.60, 8: 360.82, 9: 435.26, 10: 251.72, 11: 558.63, 12: 365.51, 13: 94.85, 14: 49.90, 15: 515.29, 16: 328.02, 17: 453.35, 18: 392.90, 19: 340.97, 20: 388.21, 21: 563.21, 22: 557.70, 23: 565.29, 24: 615.96, 25: 136.38, 26: 495.01, 27: 375.87, 28: 383.31, 29: 291.61, 31: 3.37, 32: 431.79, 33: 392.81, 34: 496.19, 35: 545.23, 36: 395.01, 37: 497.94, 38: 306.31, 39: 201.15, 40: 358.98, 41: 278.55, 42: 393.72, 43: 399.77, 44: 401.96, 45: 390.31, 46: 399.43, 47: 383.39, 48: 381.00, 49: 404.93, },
    31: {0: 296.21, 1: 252.12, 2: 277.42, 3: 546.60, 4: 172.65, 5: 186.94, 6: 766.63, 7: 219.06, 8: 363.86, 9: 438.62, 10: 253.56, 11: 561.02, 12: 367.86, 13: 93.14, 14: 52.80, 15: 518.03, 16: 329.56, 17: 455.87, 18: 392.54, 19: 339.20, 20: 386.57, 21: 563.06, 22: 557.59, 23: 565.14, 24: 616.05, 25: 139.61, 26: 498.24, 27: 378.05, 28: 380.78, 29: 288.88, 30: 3.37, 32: 433.88, 33: 393.57, 34: 497.25, 35: 546.59, 36: 395.91, 37: 498.34, 38: 306.22, 39: 202.08, 40: 361.86, 41: 281.75, 42: 394.54, 43: 400.56, 44: 402.78, 45: 391.01, 46: 400.15, 47: 384.15, 48: 381.73, 49: 405.69, },
    32: {0: 725.25, 1: 641.14, 2: 659.53, 3: 137.65, 4: 368.59, 5: 444.94, 6: 349.89, 7: 563.48, 8: 498.49, 9: 356.99, 10: 566.32, 11: 140.32, 12: 77.53, 13: 526.10, 14: 428.81, 15: 157.47, 16: 126.92, 17: 81.62, 18: 314.11, 19: 449.80, 20: 456.63, 21: 369.14, 22: 358.99, 23: 369.94, 24: 373.42, 25: 329.74, 26: 524.46, 27: 627.18, 28: 562.08, 29: 532.57, 30: 431.79, 31: 433.88, 33: 184.86, 34: 172.04, 35: 166.86, 36: 168.17, 37: 261.03, 38: 702.51, 39: 574.31, 40: 157.85, 41: 252.01, 42: 177.40, 43: 181.28, 44: 178.24, 45: 190.87, 46: 189.97, 47: 184.31, 48: 188.66, 49: 184.37, },
    33: {0: 686.20, 1: 638.09, 2: 661.20, 3: 199.73, 4: 262.35, 5: 327.39, 6: 504.21, 7: 579.70, 8: 589.06, 9: 499.40, 10: 596.71, 11: 309.19, 12: 205.33, 13: 483.64, 14: 411.48, 15: 342.32, 16: 109.90, 17: 264.71, 18: 130.48, 19: 283.20, 20: 280.47, 21: 212.94, 22: 203.89, 23: 214.40, 24: 243.52, 25: 346.61, 26: 652.54, 27: 688.08, 28: 397.64, 29: 389.00, 30: 392.81, 31: 393.57, 32: 184.86, 34: 111.70, 35: 175.76, 36: 16.83, 37: 115.69, 38: 696.02, 39: 577.85, 40: 294.46, 41: 344.69, 42: 7.52, 43: 7.92, 44: 11.46, 45: 6.54, 46: 8.21, 47: 9.45, 48: 12.36, 49: 12.16, },
    34: {0: 792.31, 1: 735.44, 2: 757.40, 3: 107.57, 4: 373.81, 5: 438.93, 6: 422.57, 7: 670.62, 8: 649.18, 9: 526.47, 10: 682.97, 11: 252.29, 12: 229.85, 13: 588.95, 14: 509.84, 15: 314.05, 16: 178.98, 17: 249.65, 18: 214.68, 19: 381.96, 20: 370.15, 21: 204.80, 22: 194.60, 23: 205.21, 24: 201.60, 25: 432.63, 26: 690.97, 27: 763.25, 28: 495.18, 29: 496.12, 30: 496.19, 31: 497.25, 32: 172.04, 33: 111.70, 35: 69.05, 36: 103.91, 37: 101.78, 38: 794.75, 39: 672.72, 40: 321.77, 41: 398.64, 42: 107.96, 43: 103.80, 44: 100.54, 45: 116.66, 46: 108.07, 47: 120.04, 48: 123.95, 49: 100.38, },
    35: {0: 842.77, 1: 777.14, 2: 797.94, 3: 49.66, 4: 434.45, 5: 502.28, 6: 358.56, 7: 707.23, 8: 663.51, 9: 521.60, 10: 715.76, 11: 206.21, 12: 238.84, 13: 639.34, 14: 554.19, 15: 282.70, 16: 218.62, 17: 231.63, 18: 283.69, 19: 450.86, 20: 439.11, 21: 254.16, 22: 244.34, 23: 254.10, 24: 234.27, 25: 468.57, 26: 690.47, 27: 786.94, 28: 564.20, 29: 563.55, 30: 545.23, 31: 546.59, 32: 166.86, 33: 175.76, 34: 69.05, 36: 164.97, 37: 162.04, 38: 837.44, 39: 712.61, 40: 324.66, 41: 414.37, 42: 170.81, 43: 167.90, 44: 164.30, 45: 181.38, 46: 173.45, 47: 183.12, 48: 187.50, 49: 165.43, },
    36: {0: 689.85, 1: 638.23, 2: 660.98, 3: 186.13, 4: 270.38, 5: 337.32, 6: 488.43, 7: 577.85, 8: 580.71, 9: 486.50, 10: 593.65, 11: 292.56, 12: 190.82, 13: 486.81, 14: 411.73, 15: 325.64, 16: 99.72, 17: 248.24, 18: 147.29, 19: 298.45, 20: 296.72, 21: 223.93, 22: 214.61, 23: 225.29, 24: 250.75, 25: 343.00, 26: 641.19, 27: 682.62, 28: 412.88, 29: 402.06, 30: 395.01, 31: 395.91, 32: 168.17, 33: 16.83, 34: 103.91, 35: 164.97, 37: 122.91, 38: 696.66, 39: 577.15, 40: 280.88, 41: 334.71, 42: 9.31, 43: 13.88, 44: 12.14, 45: 23.18, 46: 22.15, 47: 19.62, 48: 24.49, 49: 18.73, },
    37: {0: 785.23, 1: 746.98, 2: 770.78, 3: 207.14, 4: 349.81, 5: 402.73, 6: 520.56, 7: 692.28, 8: 703.62, 9: 603.22, 10: 710.79, 11: 353.87, 12: 303.99, 13: 585.34, 14: 520.92, 15: 411.36, 16: 222.46, 17: 341.98, 18: 144.37, 19: 313.48, 20: 291.83, 21: 108.18, 22: 98.07, 23: 109.04, 24: 127.96, 25: 461.47, 26: 761.51, 27: 803.70, 28: 421.75, 29: 439.09, 30: 497.94, 31: 498.34, 32: 261.03, 33: 115.69, 34: 101.78, 35: 162.04, 36: 122.91, 38: 803.64, 39: 688.55, 40: 396.48, 41: 457.08, 42: 118.67, 43: 111.55, 44: 111.43, 45: 115.30, 46: 107.57, 47: 124.38, 48: 124.76, 49: 105.70, },
    38: {0: 124.57, 1: 61.50, 2: 49.38, 3: 829.62, 4: 472.50, 5: 459.67, 6: 997.66, 7: 150.57, 8: 367.71, 9: 553.86, 10: 174.23, 11: 809.29, 12: 627.38, 13: 228.60, 14: 285.04, 15: 742.42, 16: 619.17, 17: 700.38, 18: 697.44, 19: 619.32, 20: 669.26, 21: 868.85, 22: 863.57, 23: 870.95, 24: 922.26, 25: 372.90, 26: 510.88, 27: 253.05, 28: 623.88, 29: 526.63, 30: 306.31, 31: 306.22, 32: 702.51, 33: 696.02, 34: 794.75, 35: 837.44, 36: 696.66, 37: 803.64, 39: 129.18, 40: 585.80, 41: 479.87, 42: 696.26, 43: 702.62, 44: 704.53, 45: 694.00, 46: 703.00, 47: 686.57, 48: 684.54, 49: 708.00, },
    39: {0: 197.17, 1: 67.83, 2: 85.48, 3: 702.93, 4: 374.68, 5: 378.94, 6: 869.44, 7: 39.58, 8: 274.40, 9: 438.78, 10: 84.44, 11: 680.12, 12: 498.75, 13: 152.93, 14: 168.19, 15: 614.03, 16: 495.31, 17: 571.20, 18: 592.35, 19: 536.91, 20: 585.51, 21: 760.75, 22: 754.72, 23: 762.78, 24: 810.53, 25: 245.38, 26: 423.35, 27: 210.47, 28: 562.27, 29: 465.27, 30: 201.15, 31: 202.08, 32: 574.31, 33: 577.85, 34: 672.72, 35: 712.61, 36: 577.15, 37: 688.55, 38: 129.18, 40: 456.86, 41: 351.44, 42: 577.49, 43: 584.09, 44: 585.72, 45: 576.36, 46: 585.17, 47: 568.45, 48: 566.80, 49: 589.63, },
    40: {0: 629.80, 1: 524.68, 2: 539.34, 3: 293.56, 4: 364.66, 5: 439.13, 6: 414.35, 7: 438.66, 8: 342.77, 9: 206.76, 10: 433.15, 11: 225.63, 12: 92.83, 13: 445.42, 14: 339.05, 15: 159.48, 16: 189.64, 17: 118.88, 18: 404.82, 19: 497.57, 20: 519.21, 21: 502.77, 22: 493.06, 23: 503.95, 24: 518.45, 25: 229.62, 26: 369.22, 27: 478.24, 28: 598.76, 29: 544.64, 30: 358.98, 31: 361.86, 32: 157.85, 33: 294.46, 34: 321.77, 35: 324.66, 36: 280.88, 37: 396.48, 38: 585.80, 39: 456.86, 41: 107.81, 42: 288.35, 43: 294.59, 44: 292.97, 45: 298.54, 46: 301.96, 47: 289.42, 48: 292.12, 49: 299.60, },
    41: {0: 530.33, 1: 419.08, 2: 432.84, 3: 389.61, 4: 330.80, 5: 397.45, 6: 518.01, 7: 331.65, 8: 250.61, 9: 181.49, 10: 325.35, 11: 333.44, 12: 175.90, 13: 356.21, 14: 249.21, 15: 262.59, 16: 235.05, 17: 226.23, 18: 431.86, 19: 488.45, 20: 519.17, 21: 557.59, 22: 548.58, 23: 559.06, 24: 584.03, 25: 142.27, 26: 311.10, 27: 375.35, 28: 577.09, 29: 508.78, 30: 278.55, 31: 281.75, 32: 252.01, 33: 344.69, 34: 398.64, 35: 414.37, 36: 334.71, 37: 457.08, 38: 479.87, 39: 351.44, 40: 107.81, 42: 340.17, 43: 347.14, 44: 346.60, 45: 347.07, 46: 352.84, 47: 337.48, 48: 338.81, 49: 352.82, },
    42: {0: 687.79, 1: 638.11, 2: 661.06, 3: 193.58, 4: 265.85, 5: 331.76, 6: 497.14, 7: 578.82, 8: 585.29, 9: 493.61, 10: 595.29, 11: 301.76, 12: 198.80, 13: 485.00, 14: 411.52, 15: 334.86, 16: 105.15, 17: 257.35, 18: 137.99, 19: 290.00, 20: 287.73, 21: 217.75, 22: 208.58, 23: 219.17, 24: 246.63, 25: 344.91, 26: 647.44, 27: 685.60, 28: 404.44, 29: 394.81, 30: 393.72, 31: 394.54, 32: 177.40, 33: 7.52, 34: 107.96, 35: 170.81, 36: 9.31, 37: 118.67, 38: 696.26, 39: 577.49, 40: 288.35, 41: 340.17, 43: 7.12, 44: 8.27, 45: 13.92, 46: 13.65, 47: 12.31, 48: 16.81, 49: 12.98, },
    43: {0: 693.48, 1: 644.57, 2: 667.57, 3: 192.32, 4: 270.19, 5: 335.31, 6: 497.73, 7: 585.58, 8: 592.38, 9: 500.05, 10: 602.20, 11: 303.78, 12: 204.67, 13: 490.82, 14: 417.96, 15: 338.72, 16: 112.09, 17: 261.64, 18: 135.53, 19: 290.15, 20: 286.64, 21: 210.92, 22: 201.70, 23: 212.31, 24: 239.51, 25: 351.87, 26: 654.22, 27: 692.69, 28: 404.57, 29: 396.65, 30: 399.77, 31: 400.56, 32: 181.28, 33: 7.92, 34: 103.80, 35: 167.90, 36: 13.88, 37: 111.55, 38: 702.62, 39: 584.09, 40: 294.59, 41: 347.14, 42: 7.12, 44: 3.83, 45: 13.67, 46: 8.73, 47: 16.66, 48: 20.17, 49: 5.86, },
    44: {0: 695.95, 1: 646.37, 2: 669.31, 3: 188.51, 4: 273.34, 5: 338.72, 6: 493.94, 7: 586.98, 8: 592.27, 9: 498.63, 10: 603.34, 11: 300.19, 12: 202.74, 13: 493.19, 14: 419.78, 15: 335.66, 16: 111.56, 17: 258.75, 18: 139.09, 19: 293.98, 20: 290.40, 21: 211.83, 22: 202.53, 23: 213.20, 24: 239.37, 25: 352.89, 26: 653.28, 27: 693.28, 28: 408.40, 29: 400.39, 30: 401.96, 31: 402.78, 32: 178.24, 33: 11.46, 34: 100.54, 35: 164.30, 36: 12.14, 37: 111.43, 38: 704.53, 39: 585.72, 40: 292.97, 41: 346.60, 42: 8.27, 43: 3.83, 45: 17.46, 46: 12.15, 47: 19.56, 48: 23.44, 49: 6.65, },
    45: {0: 683.10, 1: 636.27, 2: 659.51, 3: 205.96, 4: 257.89, 5: 322.28, 6: 510.74, 7: 578.65, 8: 590.64, 9: 503.08, 10: 596.12, 11: 315.67, 12: 209.94, 13: 480.75, 14: 409.68, 15: 348.30, 16: 112.74, 17: 270.50, 18: 124.13, 19: 276.74, 20: 273.93, 21: 210.54, 22: 201.64, 23: 212.04, 24: 242.82, 25: 346.34, 26: 655.46, 27: 688.44, 28: 391.18, 29: 382.99, 30: 390.31, 31: 391.01, 32: 190.87, 33: 6.54, 34: 116.66, 35: 181.38, 36: 23.18, 37: 115.30, 38: 694.00, 39: 576.36, 40: 298.54, 41: 347.07, 42: 13.92, 43: 13.67, 44: 17.46, 46: 9.21, 47: 9.59, 48: 9.59, 49: 16.29, },
    46: {0: 692.31, 1: 645.21, 2: 668.40, 3: 199.28, 4: 266.89, 5: 330.90, 6: 505.75, 7: 587.25, 8: 597.27, 9: 507.11, 10: 604.48, 11: 312.34, 12: 212.45, 13: 489.94, 14: 418.61, 15: 347.42, 16: 117.99, 17: 270.26, 18: 126.95, 19: 282.67, 20: 278.49, 21: 204.83, 22: 195.75, 23: 206.27, 24: 235.37, 25: 354.49, 26: 660.55, 27: 696.15, 28: 397.06, 29: 390.44, 30: 399.43, 31: 400.15, 32: 189.97, 33: 8.21, 34: 108.07, 35: 173.45, 36: 22.15, 37: 107.57, 38: 703.00, 39: 585.17, 40: 301.96, 41: 352.84, 42: 13.65, 43: 8.73, 44: 12.15, 45: 9.21, 47: 16.96, 48: 18.47, 49: 8.13, },
    47: {0: 676.89, 1: 628.65, 2: 651.77, 3: 205.54, 4: 253.80, 5: 319.48, 6: 507.86, 7: 570.38, 8: 581.13, 9: 493.76, 10: 587.52, 11: 311.11, 12: 201.22, 13: 474.28, 14: 402.04, 15: 341.58, 16: 103.20, 17: 263.36, 18: 129.92, 19: 278.89, 20: 277.72, 21: 220.13, 22: 211.22, 23: 221.63, 24: 252.06, 25: 337.54, 26: 645.91, 27: 679.32, 28: 393.31, 29: 382.73, 30: 383.39, 31: 384.15, 32: 184.31, 33: 9.45, 34: 120.04, 35: 183.12, 36: 19.62, 37: 124.38, 38: 686.57, 39: 568.45, 40: 289.42, 41: 337.48, 42: 12.31, 43: 16.66, 44: 19.56, 45: 9.59, 46: 16.96, 48: 4.88, 49: 21.54, },
    48: {0: 674.09, 1: 626.77, 2: 649.98, 3: 210.29, 4: 250.02, 5: 315.30, 6: 512.74, 7: 569.06, 8: 581.80, 9: 496.09, 10: 586.55, 11: 315.87, 12: 204.40, 13: 471.62, 14: 400.17, 15: 345.85, 16: 105.07, 17: 267.49, 18: 125.48, 19: 274.00, 20: 272.90, 21: 218.98, 22: 210.18, 23: 220.52, 24: 252.15, 25: 336.81, 26: 647.62, 27: 679.06, 28: 388.42, 29: 378.02, 30: 381.00, 31: 381.73, 32: 188.66, 33: 12.36, 34: 123.95, 35: 187.50, 36: 24.49, 37: 124.76, 38: 684.54, 39: 566.80, 40: 292.12, 41: 338.81, 42: 16.81, 43: 20.17, 44: 23.44, 45: 9.59, 46: 18.47, 47: 4.88, 49: 24.39, },
    49: {0: 698.36, 1: 650.01, 2: 673.06, 3: 191.18, 4: 274.08, 5: 338.56, 6: 498.00, 7: 591.24, 8: 598.18, 9: 505.23, 10: 607.95, 11: 305.28, 12: 209.39, 13: 495.80, 14: 423.40, 15: 341.73, 16: 117.76, 17: 265.03, 18: 134.05, 19: 290.70, 20: 286.18, 21: 205.40, 22: 196.14, 23: 206.78, 24: 233.66, 25: 357.66, 26: 659.71, 27: 698.54, 28: 405.07, 29: 398.55, 30: 404.93, 31: 405.69, 32: 184.37, 33: 12.16, 34: 100.38, 35: 165.43, 36: 18.73, 37: 105.70, 38: 708.00, 39: 589.63, 40: 299.60, 41: 352.82, 42: 12.98, 43: 5.86, 44: 6.65, 45: 16.29, 46: 8.13, 47: 21.54, 48: 24.39, },
}
trucks = {
    'truck1': 20,
    'truck2': 10,
    'truck3': 20
}
problem = Problem_Genetic(
    genes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 'truck1', 'truck2', 'truck3'],
    individuals_length=53,
    decode=decodeVRP,
    fitness=fitnessVRP
)

start_time = time.time()

best_solution = genetic_algorithm_t(problem, 8, min, 1, 250, 0.05, 3, 30)